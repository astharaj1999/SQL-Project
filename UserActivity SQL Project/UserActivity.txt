CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);

INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);
-- 2024 Q1
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);


-1.Managementwants to see all the users that did not login in past 5year


  select 
  max(login_timestamp)as lastdate 
  user_id
  from logins
  group by user_id 
  having  max(login_timestamp) < dateadd(MONTH,-5,getdate())
 
 OR

 select distinct user_id from logins where user_id not 
 In(select user_id  from logins where (login_timestamp) > dateadd(MONTH,-5,getdate()))

   
2 For the business units quarterly analysis,calculate how many users and how many session  were at each quarter 
order by quarter from newest to oldest
-return fist day of the quarter ,user_cnt,session_cnt

select
,count(datepart(QUARTER,LOGIN_TIMESTAMP))as session_cnt
,count(distinct user_id) as user_cnt
--,min(login_timestamp)
,DATETRUNC(quarter,min(login_timestamp)) as fistday_quarter
from  logins 
group by datepart(QUARTER,LOGIN_TIMESTAMP)


3.display user id that log-in in jan 2024  and did not log-in on nov 2023


  select distinct user_id, datepart(month,LOGIN_TIMESTAMP),datepart(YEAR,LOGIN_TIMESTAMP) from logins 
  where datepart(month,LOGIN_TIMESTAMP)='1' and datepart(YEAR,LOGIN_TIMESTAMP)='2024' 
  and user_id not in(
   select user_id from logins where  datepart(month,LOGIN_TIMESTAMP) ='11'and datepart(YEAR,LOGIN_TIMESTAMP) = '2023') 


4.ADD to the query from 2 percentage chnge in session  from last quarter.
return  first day of quarter,session_cnt,session_cnt_prev,session_percentagechange

 with cte as(select
count(datepart(QUARTER,LOGIN_TIMESTAMP))as session_cnt
,count(distinct user_id) as user_cnt
--,min(login_timestamp)
,DATETRUNC(quarter,min(login_timestamp)) as fistday_quarter
from  logins 
group by datepart(QUARTER,LOGIN_TIMESTAMP))
select *,lag(session_cnt,1)over(order by fistday_quarter) as prv_session_cnt,
(session_cnt -lag(session_cnt,1)over(order by fistday_quarter))*100.0/ lag(session_cnt,1)over(order by fistday_quarter) as perchnge
from cte


5.Display  the users that had the higher session score (max) for each day.
return : date,username,score


with cte as(
select user_id,  sum(session_score) as score, cast(login_timestamp as date)as login_date from logins
group by user_id ,cast(login_timestamp as date)
--order by cast(login_timestamp as date),score
) 
select  * from (
select *, ROW_NUMBER() over(partition by login_date order by score desc) as rn
from cte 
)a where rn=1



6.TO IDENTIFY  BEST USERS- -RETURN  THE USERS  THAT HAD  SESSION EVERY  SINGLE DAY SINCE THERE FIRST Logins
ASSUME CURRENT DATE AS-2024-06-28

  SELECT  USER_ID,MIN(CAST(LOGIN_TIMESTAMP AS DATE))AS FIRST_LOGIN
  ,DATEDIFF(DAY,MIN(CAST(LOGIN_TIMESTAMP AS DATE)),'2024-06-28')+1 AS NO_OF_LOGIN
  ,COUNT(DISTINCT CAST(LOGIN_TIMESTAMP AS DATE)) AS NO_0F_LOGIN_DAYS
  FROM logins
  GROUP BY USER_ID
  HAVING DATEDIFF(DAY,MIN(CAST(LOGIN_TIMESTAMP AS DATE)),'2024-06-28')+1 =COUNT(DISTINCT CAST(LOGIN_TIMESTAMP AS DATE)) 




7.ON WAHT DAY THREE IS NO LOGIN AT ALL

  WITH CTE AS(
  SELECT  MIN(CAST(LOGIN_TIMESTAMP AS DATE))AS FIRST_LOGIN ,'2024-06-28' AS LAST_LOGIN
  FROM LOGINS
  UNION ALL
  SELECT DATEADD(DAY,1,FIRST_LOGIN),LAST_LOGIN FROM CTE WHERE FIRST_LOGIN<LAST_LOGIN
  )
  SELECT * FROM CTE
  WHERE FIRST_LOGIN NOT IN (SELECT DISTINCT CAST(LOGIN_TIMESTAMP AS DATE) FROM logins)
  OPTION(MAXRECURSION 500)